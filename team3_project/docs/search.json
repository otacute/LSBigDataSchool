[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "여행 데이터 시각화",
    "section": "",
    "text": "사용한 데이터 : 월별 여행 횟수, 지역별 관광지 검색 순위, 관광 여행 정보 획득 경로, 관광여행 방문지 선택이유(1순위)"
  },
  {
    "objectID": "유나.html",
    "href": "유나.html",
    "title": "여행 정보를 얻는 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\nroute\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = 2018\nroute.loc[9:17,\"year\"] = 2019\nroute.loc[18:26,\"year\"] = 2020\nroute.loc[27:35,\"year\"] = 2021\nroute.loc[36:43,\"year\"] = 2022\nroute[\"year\"]=route[\"year\"].astype(int)\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\nroute.isna().sum()\n\n# 항목\nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\n                \n# 가구\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n\n# 학벌\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n\nroute.head(20)\n\n# 전처리한 데이터 파일 추출\nroute.to_excel('pre_route.xlsx', index=False)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5312\\1872833859.py:19: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`"
  },
  {
    "objectID": "현주.html",
    "href": "현주.html",
    "title": "여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"./data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "선아.html",
    "href": "선아.html",
    "title": "이삭토스트 맛있조",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "결론.html",
    "href": "결론.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "한결.html",
    "href": "한결.html",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "",
    "text": "통계청 - 월별 국내 여행 횟수 다운로드 링크\n국내 여행의 의미\n\n공간의 범위\n행정구역상 현 거주지를 벗어나 다른 지역(시/군)을 다녀온 모든 여행을 의미\n활동의 범위\n\n관광 여행\n관광, 맛집 투어, 박물관, 전시 구경, 스포츠, 레저 체험 등의 모든 활동\n기타 여행\n명절 귀성, 가족 행사, 출장, 업무 세미나 등 모든 활동\n\n\n데이터의 기본 단위 : 천회"
  },
  {
<<<<<<< HEAD
    "objectID": "유나.html#전처리",
    "href": "유나.html#전처리",
    "title": "여행 정보를 얻는 경로",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nroute = pd.read_excel(\"C:/Users/USER/Documents/LS빅데이터스쿨/team3_project/youna/youna_route.xlsx\",header=1)\nroute\n\n# 변수 영어로 변경\nroute = route.rename(columns = {\"시점\":\"year\", \"항목\":\"access_path\", \"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\n\n# 연도 결측치 처리\nroute.loc[0:8,\"year\"] = 2018\nroute.loc[9:17,\"year\"] = 2019\nroute.loc[18:26,\"year\"] = 2020\nroute.loc[27:35,\"year\"] = 2021\nroute.loc[36:43,\"year\"] = 2022\nroute[\"year\"]=route[\"year\"].astype(int)\n\n# 결측치 제거\nroute.replace('-', np.nan, inplace=True)\nroute.isna().sum()\n\n# 항목\nroute.loc[route[\"access_path\"]==\"과거 방문 경험\", \"access_path\"] = \"experience\"\nroute.loc[route[\"access_path\"]==\"주변인(친지/친구/동료 등)\", \"access_path\"] = \"acquaintance\"\nroute.loc[route[\"access_path\"]==\"인터넷 사이트/모바일 앱(PC/스마트폰)\", \"access_path\"] = \"internet_mobile_app\"\nroute.loc[route[\"access_path\"]==\"광고(TV/라디오/ 신문/잡지/ 지하철/옥외 광고판 등)\", \"access_path\"] = \"advertising\"\nroute.loc[route[\"access_path\"]==\"기사 및 방송 프로그램(TV/라디오/ 신문/잡지)\", \"access_path\"] = \"article_broadcast\"\nroute.loc[route[\"access_path\"]==\"관광 안내 서적\", \"access_path\"] = \"guidebook\"\nroute.loc[route[\"access_path\"]==\"여행사(방문, 전화)\", \"access_path\"] = \"travel_agency\"\nroute.loc[route[\"access_path\"]==\"정보 없이 방문\", \"access_path\"] = \"no_information\"\nroute.loc[route[\"access_path\"]==\"기타\", \"access_path\"] = \"etc\"\n\n# 연령대\nroute[\"teens\"] = route[\"15~19세\"]   \nroute[\"young_adults\"] = route[\"20대\"] + route[\"30대\"]\nroute[\"middle_adults\"] = route[\"40대\"] + route[\"50대\"]\nroute[\"senior\"] = route[\"60대\"] + route[\"70세 이상\"]\nroute = route.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n#2018\nroute.loc[0:8, \"young_adults\"]  = (route.loc[0:8, \"young_adults\"]  / route.loc[0:8, \"young_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"middle_adults\"] = (route.loc[0:8, \"middle_adults\"] / route.loc[0:8, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[0:8, \"senior\"] = (route.loc[0:8, \"senior\"]        / route.loc[0:8, \"senior\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"young_adults\"]  = (route.loc[9:17, \"young_adults\"]  / route.loc[9:17, \"young_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"middle_adults\"] = (route.loc[9:17, \"middle_adults\"] / route.loc[9:17, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[9:17, \"senior\"] = (route.loc[9:17, \"senior\"]        / route.loc[9:17, \"senior\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"young_adults\"]  = (route.loc[18:26, \"young_adults\"]  / route.loc[18:26, \"young_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"middle_adults\"]    = (route.loc[18:26, \"middle_adults\"] / route.loc[18:26, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[18:26, \"senior\"] = (route.loc[18:26, \"senior\"]       / route.loc[18:26, \"senior\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"young_adults\"]  = (route.loc[27:35, \"young_adults\"]  / route.loc[27:35, \"young_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"middle_adults\"] = (route.loc[27:35, \"middle_adults\"] / route.loc[27:35, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[27:35, \"senior\"] = (route.loc[27:35, \"senior\"]        / route.loc[27:35, \"senior\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"young_adults\"]  = (route.loc[36:43, \"young_adults\"]  / route.loc[36:43, \"young_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"middle_adults\"] = (route.loc[36:43, \"middle_adults\"] / route.loc[36:43, \"middle_adults\"].sum() * 100).round(1)\nroute.loc[36:43, \"senior\"] = (route.loc[36:43, \"senior\"]        / route.loc[36:43, \"senior\"].sum() * 100).round(1)\n\n\n#월급\nroute[\"l_sal\"] = route[\"100만원 미만\"] + route[\"100~200만원 미만\"]\nroute[\"m_sal\"] = route[\"200~300만원 미만\"] + route[\"300~400만원 미만\"] + route[\"400~500만원 미만\"]\nroute[\"h_sal\"] = route[\"500~600만원 미만\"] + route[\"600만원 이상\"]\nroute[\"nr\"]= route[\"무응답\"]\n\n#2018\nroute.loc[0:8, \"l_sal\"] = (route.loc[0:8, \"l_sal\"] / route.loc[0:8, \"l_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"m_sal\"] = (route.loc[0:8, \"m_sal\"] / route.loc[0:8, \"m_sal\"].sum() * 100).round(1)\nroute.loc[0:8, \"h_sal\"] = (route.loc[0:8, \"h_sal\"] / route.loc[0:8, \"h_sal\"].sum() * 100).round(1)\n#2019\nroute.loc[9:17, \"l_sal\"] = (route.loc[9:17, \"l_sal\"] / route.loc[9:17, \"l_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"m_sal\"] = (route.loc[9:17, \"m_sal\"] / route.loc[9:17, \"m_sal\"].sum() * 100).round(1)\nroute.loc[9:17, \"h_sal\"] = (route.loc[9:17, \"h_sal\"] / route.loc[9:17, \"h_sal\"].sum() * 100).round(1)\n#2020\nroute.loc[18:26, \"l_sal\"] = (route.loc[18:26, \"l_sal\"] / route.loc[18:26, \"l_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"m_sal\"] = (route.loc[18:26, \"m_sal\"] / route.loc[18:26, \"m_sal\"].sum() * 100).round(1)\nroute.loc[18:26, \"h_sal\"] = (route.loc[18:26, \"h_sal\"] / route.loc[18:26, \"h_sal\"].sum() * 100).round(1)\n#2021\nroute.loc[27:35, \"l_sal\"] = (route.loc[27:35, \"l_sal\"] / route.loc[27:35, \"l_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"m_sal\"] = (route.loc[27:35, \"m_sal\"] / route.loc[27:35, \"m_sal\"].sum() * 100).round(1)\nroute.loc[27:35, \"h_sal\"] = (route.loc[27:35, \"h_sal\"] / route.loc[27:35, \"h_sal\"].sum() * 100).round(1)\n#2022\nroute.loc[36:43, \"l_sal\"] = (route.loc[36:43, \"l_sal\"] / route.loc[36:43, \"l_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"m_sal\"] = (route.loc[36:43, \"m_sal\"] / route.loc[36:43, \"m_sal\"].sum() * 100).round(1)\nroute.loc[36:43, \"h_sal\"] = (route.loc[36:43, \"h_sal\"] / route.loc[36:43, \"h_sal\"].sum() * 100).round(1)\n\nroute = route.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상', \"무응답\"], axis=1)\n                \n# 가구\nroute = route.rename(columns = { '1인' : 'per1',\n                         '2인' : 'per2',\n                        '3인이상' : 'per3+'})\n\n# 학벌\nroute = route.rename(columns = { '초졸 이하' : 'elmt',\n                         '중학교' : 'mid',\n                        '고등학교' : 'high',\n                        '대학교이상' : 'univ+',\n                        })\n\n# 직업\nroute = route.drop(['임금봉급근로자', '고용원있는사업주', '고용원없는자영업자', \n                    '무급가족 종사자', '사무전문', '기술생산노무', '판매서비스',\n                    \"자영업\",\"전업주부\",\"학생\",\"무직은퇴\",\"기타\"], axis=1)\n\nroute.head(20)\n\n# 전처리한 데이터 파일 추출\nroute.to_excel('pre_route.xlsx', index=False)\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5312\\1872833859.py:19: FutureWarning:\n\nDowncasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`"
  },
  {
    "objectID": "유나.html#개년-평균-경로-순위-막대그래프",
    "href": "유나.html#개년-평균-경로-순위-막대그래프",
    "title": "여행 정보를 얻는 경로",
    "section": "5개년 평균 경로 순위 막대그래프",
    "text": "5개년 평균 경로 순위 막대그래프\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n##1. 5개년 평균 경로 순위 구하기\nroute2=route.groupby(\"access_path\")\\\n.agg(total_mean = (\"total\",\"mean\"))\n\nroute2 = route2.sort_values([\"total_mean\"], ascending = False)\n\n##2. 그래프화 화기\nplt.clf()\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.subplots_adjust(bottom=0.2)\nsns.barplot(data=route2, x=\"access_path\", y=\"total_mean\", palette = \"Set1\")\nplt.xlabel('여행 정보 획득 경로')\nplt.ylabel('소계')\nplt.xticks(rotation=20)\nplt.xticks(fontsize=8)\nplt.title('5개년 평균 여행 정보 획득 경로',fontsize=15)\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5312\\2100622369.py:14: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect."
  },
  {
    "objectID": "유나.html#연도별-정보-획득-경로-추이",
    "href": "유나.html#연도별-정보-획득-경로-추이",
    "title": "여행 정보를 얻는 경로",
    "section": "연도별 정보 획득 경로 추이",
    "text": "연도별 정보 획득 경로 추이\n\nroute['year'] = route['year'].astype(int)\nroute_path = route.groupby(['year','access_path'])['total']\\\n                   .sum().unstack()\nroute_path.index = route_path.index.astype(int)\nplt.clf()\n\nroute_path.plot(ylim=[7,45])\n\nplt.subplots_adjust(right=0.71)\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1),fontsize=7)\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.title('연도 별 여행 정보 획득 경로',fontsize=15)\nplt.show()\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n원래이미지"
  },
  {
    "objectID": "유나.html#정보-획득-경로-top4에서-성별-차이",
    "href": "유나.html#정보-획득-경로-top4에서-성별-차이",
    "title": "여행 정보를 얻는 경로",
    "section": "정보 획득 경로 Top4에서 성별 차이",
    "text": "정보 획득 경로 Top4에서 성별 차이\n\nroute_p = route[route['access_path'].isin(['acquaintance', 'experience', 'no_information', 'internet_mobile_app'])]\nroute_s = route_p.groupby('access_path')[['male', 'female']].mean()\nroute_s\n\npath = route_p['access_path'].unique()\nindex = np.arange(len(path))\nbar_width=0.2\n\nplt.clf()\nplt.bar(index, route_s[\"male\"], bar_width, label=\"male\")\nplt.bar(index + bar_width, route_s[\"female\"], bar_width, label=\"female\")\n\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.xlabel('여행 정보 획득 경로')\nplt.title('여행 정보 획득 경로 Top 4 : 성별',fontsize=13)\nplt.xticks(index + bar_width, path, fontsize=6.5)\nplt.legend(fontsize=8)\nplt.show()"
  },
  {
    "objectID": "유나.html#정보-획득-경로-top4에서-연령별-차이",
    "href": "유나.html#정보-획득-경로-top4에서-연령별-차이",
    "title": "여행 정보를 얻는 경로",
    "section": "정보 획득 경로 Top4에서 연령별 차이",
    "text": "정보 획득 경로 Top4에서 연령별 차이\n\nroute_p = route[route['access_path'].isin(['acquaintance', 'experience', 'no_information', 'internet_mobile_app'])]\nroute_m = route_p.groupby('access_path')[[\"teens\",\"young_adults\",\"middle_adults\",\"senior\"]].mean()\nroute_m\n\npath = route_p['access_path'].unique()\nindex = np.arange(len(path))\nbar_width=0.15\n\nplt.clf()\nplt.bar(index, route_m[\"teens\"], bar_width, label=\"teens\")\nplt.bar(index + bar_width, route_m[\"young_adults\"], bar_width, label=\"young_adults\")\nplt.bar(index + 2 * bar_width, route_m[\"middle_adults\"], bar_width, label=\"middle_adults\")\nplt.bar(index + 3 * bar_width, route_m[\"senior\"], bar_width, label=\"senior\")\n\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.xlabel('여행 정보 획득 경로')\nplt.title('여행 정보 획득 경로 Top 4 : 연령대',fontsize=13)\nplt.xticks(index + bar_width, path, fontsize=6)\nplt.legend(fontsize=8)\nplt.show()"
=======
    "objectID": "현주.html#전처리",
    "href": "현주.html#전처리",
    "title": "여행을 선택하는 이유",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 파일 불러오기\ndf = pd.read_excel(\"./data/select.xlsx\")\ndf.head()\n\n# 변수 변경\ndf = df.rename(columns = {\"소계\" : \"total\", \"남자\" : \"male\", \"여자\" : \"female\"})\ndf.head()\n\n\n\n\n\n\n\n\n시점\n항목\ntotal\nmale\nfemale\n15~19세\n20대\n30대\n40대\n50대\n...\n2인\n3인이상\n100만원 미만\n100~200만원 미만\n200~300만원 미만\n300~400만원 미만\n400~500만원 미만\n500~600만원 미만\n600만원 이상\n무응답\n\n\n\n\n0\n2018\n볼거리 제공\n18.0\n19.0\n17.1\n18.9\n19.3\n18.0\n17.6\n18.8\n...\n17.8\n18.4\n21.2\n14.7\n17.9\n18.2\n18.6\n18.4\n17.7\n20.5\n\n\n1\n2018\n여행지 지명도\n18.0\n16.6\n19.4\n17.4\n16.3\n18.4\n20.8\n18.5\n...\n16.8\n18.5\n14.8\n16.5\n15.7\n17.3\n19.1\n18.0\n20.3\n9.4\n\n\n2\n2018\n여행할 수 있는 시간\n8.0\n8.2\n7.8\n6.0\n9.0\n9.8\n7.0\n8.3\n...\n8.6\n7.9\n7.5\n6.1\n9.2\n7.3\n8.6\n8.2\n7.7\n4.5\n\n\n3\n2018\n이동 거리\n8.7\n9.5\n7.8\n9.9\n8.8\n7.9\n8.5\n8.9\n...\n9.5\n8.3\n7.2\n12.2\n8.2\n8.5\n9.1\n9.2\n6.7\n18.1\n\n\n4\n2018\n여행 동반자 유형\n8.2\n8.1\n8.2\n6.1\n8.2\n8.1\n7.3\n8.8\n...\n8.5\n7.8\n10.7\n7.6\n8.1\n8.0\n9.1\n8.1\n7.3\n9.9\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\n\n# 연령대\ndf[\"teens\"] = df[\"15~19세\"]\ndf[\"young_adults\"] = df[\"20대\"] + df[\"30대\"]\ndf[\"middle_adults\"] = df[\"40대\"] + df[\"50대\"]\ndf[\"senior\"] = df[\"60대\"] + df[\"70세 이상\"]\n\n#2018 각 값을 열의 합계로 나눈뒤 100을 곱하여 백분율 계산. 소수점 1까지 반올림\ndf.loc[0:14, \"young_adults\"] = (df.loc[0:14, \"young_adults\"] / df.loc[0:14, \"young_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"middle_adults\"] = (df.loc[0:14, \"middle_adults\"] / df.loc[0:14, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[0:14, \"senior\"] = (df.loc[0:14, \"senior\"] / df.loc[0:14, \"senior\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"young_adults\"] = (df.loc[15:29, \"young_adults\"] / df.loc[15:29, \"young_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"middle_adults\"] = (df.loc[15:29, \"middle_adults\"] / df.loc[15:29, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[15:29, \"senior\"] = (df.loc[15:29, \"senior\"] / df.loc[15:29, \"senior\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"young_adults\"] = (df.loc[30:44, \"young_adults\"] / df.loc[30:44, \"young_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"middle_adults\"] = (df.loc[30:44, \"middle_adults\"] / df.loc[30:44, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[30:44, \"senior\"] = (df.loc[30:44, \"senior\"] / df.loc[30:44, \"senior\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"young_adults\"] = (df.loc[45:59, \"young_adults\"] / df.loc[45:59, \"young_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"middle_adults\"] = (df.loc[45:59, \"middle_adults\"] / df.loc[45:59, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[45:59, \"senior\"] = (df.loc[45:59, \"senior\"] / df.loc[45:59, \"senior\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"young_adults\"] = (df.loc[60:74, \"young_adults\"] / df.loc[60:74, \"young_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"middle_adults\"] = (df.loc[60:74, \"middle_adults\"] / df.loc[60:74, \"middle_adults\"].sum() * 100).round(1)\ndf.loc[60:74, \"senior\"] = (df.loc[60:74, \"senior\"] / df.loc[60:74, \"senior\"].sum() * 100).round(1)\n\ndf = df.drop(['15~19세', '20대', '30대', '40대', '50대', '60대', '70세 이상'], axis=1)\n\n\n\n\n\ndf[\"l_sal\"] = df[\"100만원 미만\"] + df[\"100~200만원 미만\"]\ndf[\"m_sal\"] = df[\"200~300만원 미만\"] + df[\"300~400만원 미만\"] + df[\"400~500만원 미만\"]\ndf[\"h_sal\"] = df[\"500~600만원 미만\"] + df[\"600만원 이상\"]\n#2018\ndf.loc[0:14, \"l_sal\"] = (df.loc[0:14, \"l_sal\"] / df.loc[0:14, \"l_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"m_sal\"] = (df.loc[0:14, \"m_sal\"] / df.loc[0:14, \"m_sal\"].sum() * 100).round(1)\ndf.loc[0:14, \"h_sal\"] = (df.loc[0:14, \"h_sal\"] / df.loc[0:14, \"h_sal\"].sum() * 100).round(1)\n#2019\ndf.loc[15:29, \"l_sal\"] = (df.loc[15:29, \"l_sal\"] / df.loc[15:29, \"l_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"m_sal\"] = (df.loc[15:29, \"m_sal\"] / df.loc[15:29, \"m_sal\"].sum() * 100).round(1)\ndf.loc[15:29, \"h_sal\"] = (df.loc[15:29, \"h_sal\"] / df.loc[15:29, \"h_sal\"].sum() * 100).round(1)\n#2020\ndf.loc[30:44, \"l_sal\"] = (df.loc[30:44, \"l_sal\"] / df.loc[30:44, \"l_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"m_sal\"] = (df.loc[30:44, \"m_sal\"] / df.loc[30:44, \"m_sal\"].sum() * 100).round(1)\ndf.loc[30:44, \"h_sal\"] = (df.loc[30:44, \"h_sal\"] / df.loc[30:44, \"h_sal\"].sum() * 100).round(1)\n#2021\ndf.loc[45:59, \"l_sal\"] = (df.loc[45:59, \"l_sal\"] / df.loc[45:59, \"l_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"m_sal\"] = (df.loc[45:59, \"m_sal\"] / df.loc[45:59, \"m_sal\"].sum() * 100).round(1)\ndf.loc[45:59, \"h_sal\"] = (df.loc[45:59, \"h_sal\"] / df.loc[45:59, \"h_sal\"].sum() * 100).round(1)\n#2022\ndf.loc[60:74, \"l_sal\"] = (df.loc[60:74, \"l_sal\"] / df.loc[60:74, \"l_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"m_sal\"] = (df.loc[60:74, \"m_sal\"] / df.loc[60:74, \"m_sal\"].sum() * 100).round(1)\ndf.loc[60:74, \"h_sal\"] = (df.loc[60:74, \"h_sal\"] / df.loc[60:74, \"h_sal\"].sum() * 100).round(1)\n\n\ndf = df.drop(['100만원 미만', '100~200만원 미만', '200~300만원 미만', '300~400만원 미만', '400~500만원 미만',\\\n                '500~600만원 미만', '600만원 이상'], axis=1)\n\n\n\n\n\n# 가구\ndf = df.rename(columns = { '1인' : 'per1',\n            '2인' : 'per2',\n            '3인이상' : 'per3+'})\n\n# 학벌\ndf = df.rename(columns = { '초졸 이하' : 'elmt',\n             '중학교' : 'mid',\n            '고등학교' : 'high',\n            '대학교이상' : 'univ+'})\n# 무응답 NR\ndf = df.rename(columns = {\"무응답\" : \"nr\",\n                        \"시점\" : \"year\",\n                        \"항목\" : \"item\"})\ndf.info()\ndf.columns\n\n# 엑셀 파일로 내보내기\ndf.to_excel('pre_select.xlsx', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 75 entries, 0 to 74\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           75 non-null     int64  \n 1   item           75 non-null     object \n 2   total          75 non-null     float64\n 3   male           75 non-null     float64\n 4   female         75 non-null     float64\n 5   elmt           75 non-null     float64\n 6   mid            75 non-null     float64\n 7   high           75 non-null     float64\n 8   univ+          75 non-null     float64\n 9   per1           75 non-null     float64\n 10  per2           75 non-null     float64\n 11  per3+          75 non-null     float64\n 12  nr             15 non-null     float64\n 13  teens          75 non-null     float64\n 14  young_adults   75 non-null     float64\n 15  middle_adults  75 non-null     float64\n 16  senior         75 non-null     float64\n 17  l_sal          75 non-null     float64\n 18  m_sal          75 non-null     float64\n 19  h_sal          75 non-null     float64\ndtypes: float64(18), int64(1), object(1)\nmemory usage: 11.8+ KB"
  },
  {
    "objectID": "현주.html#년도별-여행지-선택-5순위",
    "href": "현주.html#년도별-여행지-선택-5순위",
    "title": "여행을 선택하는 이유",
    "section": "년도별 여행지 선택 5순위",
    "text": "년도별 여행지 선택 5순위\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# 한글 설정\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\ndf = pd.read_excel(\"./pre_data/pre_select.xlsx\")\ndf\n\ndf_2018 = df.loc[0:14]\ndf_2019 = df.loc[15:29]\ndf_2020 = df.loc[30:44]\ndf_2021 = df.loc[45:59]\ndf_2022 = df.loc[60:74]\n\ntotal_2018 = df_2018.sort_values(\"total\", ascending = False).head()\ntotal_2019 = df_2019.sort_values(\"total\", ascending = False).head()\ntotal_2020 = df_2020.sort_values(\"total\", ascending = False).head()\ntotal_2021 = df_2021.sort_values(\"total\", ascending = False).head()\ntotal_2022 = df_2022.sort_values(\"total\", ascending = False).head()\n\ntotal_all = pd.concat([total_2018, total_2019, total_2020, total_2021, total_2022]).iloc[:, :3]\ntotal_all_pivot = total_all.pivot(index='year', columns='item', values='total')\n\n\nfig = px.bar(total_all_pivot, title='년도별 여행지 선택 5순위', labels={'value': '총합', 'year': '년도'})\n# 레이아웃 설정\nfig.update_layout(\n    xaxis_title='년도',\n    yaxis_title='총합',\n    legend_title_text='Item',\n    legend=dict(\n        x=1,  # x 위치 (1은 그래프의 가장 오른쪽)\n        y=1,  # y 위치 (1은 그래프의 가장 위쪽)\n        xanchor='left',  # x 기준점\n        yanchor='top'  # y 기준점\n    )\n)\n\nfig.show()"
  },
  {
    "objectID": "현주.html#여행을-선택하는-이유",
    "href": "현주.html#여행을-선택하는-이유",
    "title": "여행을 선택하는 이유",
    "section": "여행을 선택하는 이유",
    "text": "여행을 선택하는 이유\n\n#선 그래프\nvisualappeal = total_all.query(\"item == '볼거리 제공'\")\nPopularity = total_all.query(\"item == '여행지 지명도'\")\ntime = total_all.query(\"item == '여행할 수 있는 시간'\")\n\n\n# 선 그래프 생성\nplt.figure(figsize=(10, 6))\nplt.plot(visualappeal[\"year\"], visualappeal[\"total\"], marker='o',label=\"볼거리 제공\")\nplt.plot(Popularity[\"year\"], Popularity[\"total\"], marker='o',label=\"여행지 지명도\")\nplt.plot(time[\"year\"], time[\"total\"], marker='o',label=\"여행할 수 있는 시간\")\n\n\n# 그래프에 제목과 축 레이블 추가\nplt.title(\"여행을 선택하는 이유 - 전체\")\nplt.xlabel(\"년도\")\nplt.ylabel(\"전체 %\")\nplt.legend(fontsize='x-small',loc='center left')\nplt.show()"
  },
  {
    "objectID": "현주.html#여행지-고르는-이유---남자",
    "href": "현주.html#여행지-고르는-이유---남자",
    "title": "여행을 선택하는 이유",
    "section": "여행지 고르는 이유 - 남자",
    "text": "여행지 고르는 이유 - 남자\n\n#남자\nmale_2018 = df_2018[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2019 = df_2019[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2020 = df_2020[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2021 = df_2021[[\"item\", \"male\"]].sort_values(by=\"item\")\nmale_2022 = df_2022[[\"item\", \"male\"]].sort_values(by=\"item\")\n\nmale_All = pd.merge(male_2018, male_2019, how = 'left', on = 'item')\nmale_All = pd.merge(male_All, male_2020, how = 'left', on = 'item', suffixes=('', '_2020'))\nmale_All = pd.merge(male_All, male_2021, how = 'left', on = 'item', suffixes=('', '_2021'))\nmale_All = pd.merge(male_All, male_2022, how = 'left', on = 'item', suffixes=('', '_2022'))\n\n\n# 각 연도별 열 이름 변경 (이미 올바르게 되어있다면 생략 가능)\nmale_All.columns = ['item', 'male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']\n\n# 각 행의 총합을 계산하여 새로운 열에 추가합니다.\nmale_All['total_male'] = male_All[['male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']].sum(axis=1)\n\n# 필요 없는 열 삭제 및 total_male 기준으로 정렬\nmale_All = male_All.drop(columns=['male_2018', 'male_2019', 'male_2020', 'male_2021', 'male_2022']).sort_values(by='total_male', ascending=False)\n\nmale_All.head()\n\nM = male_All.head().plot.bar(rot = 0, color='green', title='여행지 고르는 이유 순위 - 남자')\nM.set_xticklabels(['볼거리', '지명도', '이동거리', '여행시간', '동반자유형'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "현주.html#여행지-고르는-이유---여자",
    "href": "현주.html#여행지-고르는-이유---여자",
    "title": "여행을 선택하는 이유",
    "section": "여행지 고르는 이유 - 여자",
    "text": "여행지 고르는 이유 - 여자\n\n# 여자 데이터 정렬\nfemale_2018 = df_2018[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2019 = df_2019[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2020 = df_2020[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2021 = df_2021[[\"item\", \"female\"]].sort_values(by=\"item\")\nfemale_2022 = df_2022[[\"item\", \"female\"]].sort_values(by=\"item\")\n\n# 데이터 병합\nfemale_All = pd.merge(female_2018, female_2019, how='left', on='item', suffixes=('_2018', '_2019'))\nfemale_All = pd.merge(female_All, female_2020, how='left', on='item')\nfemale_All = pd.merge(female_All, female_2021, how='left', on='item')\nfemale_All = pd.merge(female_All, female_2022, how='left', on='item')\n\n# 각 연도별 열 이름 변경 (필요한 경우)\nfemale_All.columns = ['item', 'female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']\n\n# 각 행의 총합을 계산하여 새로운 열에 추가합니다.\nfemale_All['total_female'] = female_All[['female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']].sum(axis=1)\n\n# 필요 없는 열 삭제 및 total_female 기준으로 내림차순 정렬\nfemale_All = female_All.drop(columns=['female_2018', 'female_2019', 'female_2020', 'female_2021', 'female_2022']).sort_values(by='total_female', ascending=False)\n\nF =female_All.head().plot.bar(rot = 0, color='blue', title='여행지 고르는 이유 순위 - 여자')\nF.set_xticklabels(['볼거리', '지명도', '여행시간', '이동거리', '음식'])\n\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
<<<<<<< HEAD
>>>>>>> b46204bbad9aa4e1b712f9f1a4390491d4e3071a
=======
  },
  {
<<<<<<< HEAD
    "objectID": "선아.html#전처리",
    "href": "선아.html#전처리",
    "title": "이삭토스트 맛있조",
    "section": "전처리",
    "text": "전처리\n\nimport numpy as np\nimport pandas as pd\n\n# 데이터 로드\ntour_2018 = pd.read_csv('data/ranking_2018.csv', encoding='cp949')\ntour_2019 = pd.read_csv('data/ranking_2019.csv', encoding='cp949')\ntour_2020 = pd.read_csv('data/ranking_2020.csv', encoding='cp949')\ntour_2021 = pd.read_csv('data/ranking_2021.csv', encoding='cp949')\ntour_2022 = pd.read_csv('data/ranking_2022.csv', encoding='cp949')\n\n# 열 이름 변경\nrename_dict = {'순위': 'ranking', '광역시/도': 'state', '시/군/구': 'city', '관광지명': 'spot',\n               '도로명주소': 'address', '중분류 카테고리': 'category_m', '소분류 카테고리': 'category_s', '검색건수': 'search_count'}\n\ntour_2018.rename(columns=rename_dict, inplace=True)\ntour_2019.rename(columns=rename_dict, inplace=True)\ntour_2020.rename(columns=rename_dict, inplace=True)\ntour_2021.rename(columns=rename_dict, inplace=True)\ntour_2022.rename(columns=rename_dict, inplace=True)\n\n\n# 'cate_remove' 목록 정의\ncate_remove = ['교통시설', '면세점', '백화점', '쇼핑몰', '대형마트', '기타쇼핑시설']\n\n# 각 연도별 데이터에서 'cate_remove' 목록에 해당하는 카테고리를 제거\ntour_2018 = tour_2018[~tour_2018['category_s'].isin(cate_remove)]\ntour_2019 = tour_2019[~tour_2019['category_s'].isin(cate_remove)]\ntour_2020 = tour_2020[~tour_2020['category_s'].isin(cate_remove)]\ntour_2021 = tour_2021[~tour_2021['category_s'].isin(cate_remove)]\ntour_2022 = tour_2022[~tour_2022['category_s'].isin(cate_remove)]\n\n\n# 각 데이터프레임에 연도 열 추가\ntour_2018['year'] = 2018\ntour_2019['year'] = 2019\ntour_2020['year'] = 2020\ntour_2021['year'] = 2021\ntour_2022['year'] = 2022\n\n\n# 데이터 결합\ntours = [tour_2018, tour_2019, tour_2020, tour_2021, tour_2022]\ntour_total = pd.concat(tours, ignore_index=True)\n\n# 불필요한 열 삭제\ntour_total.drop(columns=['address', 'ranking'], inplace=True)\n\n\n# 'combined_city' 열 추가\ntour_total['combined_city'] = tour_total['state'] + \" \" + tour_total['city']\n\n# 결과 저장\ntour_total.to_excel('total_tour.xlsx', index=False)\n# 결과 확인\ntour_total.info()\nprint(tour_total.head(40))  # 상위 40개 행 출력\nprint(tour_total['category_s'].unique())  # 카테고리 확인\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1373 entries, 0 to 1372\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   state          1373 non-null   object\n 1   city           1373 non-null   object\n 2   spot           1373 non-null   object\n 3   category_m     1373 non-null   object\n 4   category_s     1373 non-null   object\n 5   search_count   1373 non-null   int64 \n 6   year           1373 non-null   int64 \n 7   combined_city  1373 non-null   object\ndtypes: int64(2), object(6)\nmemory usage: 85.9+ KB\n      state      city         spot category_m   category_s  search_count  \\\n0     서울특별시       강남구          코엑스       문화관광         전시시설        456473   \n1       경기도   용인시 처인구         에버랜드       문화관광         테마공원        330266   \n2     서울특별시       동작구      노량진수산시장         쇼핑           시장        251985   \n3     서울특별시       송파구  가락동농수산물도매시장         쇼핑           시장        231899   \n4     서울특별시       용산구   CGV용산아이파크몰       문화관광         공연시설        227562   \n5     인천광역시        중구      을왕리해수욕장       자연관광  자연경관(하천/해양)        217836   \n6       경기도  고양시 일산서구     킨텍스제1전시장       문화관광         전시시설        214874   \n7     서울특별시       송파구      롯데월드잠실점       문화관광         테마공원        212754   \n8   전북특별자치도   전주시 완산구       전주한옥마을       역사관광        역사유적지        212376   \n9     인천광역시        중구          월미도       자연관광  자연경관(하천/해양)        207328   \n10  강원특별자치도       속초시     속초관광수산시장         쇼핑           시장        192140   \n11  강원특별자치도       강릉시         경포해변       자연관광  자연경관(하천/해양)        188157   \n12     충청남도       보령시       대천해수욕장       자연관광  자연경관(하천/해양)        186565   \n13    인천광역시       남동구         소래포구       자연관광  자연경관(하천/해양)        181965   \n14    서울특별시      영등포구      여의도한강공원       문화관광         도시공원        176908   \n15      경기도  고양시 일산서구     킨텍스제2전시장       문화관광         전시시설        174400   \n16      경기도       구리시   구리농수산물도매시장         쇼핑           시장        169352   \n17  강원특별자치도       속초시         속초해변       자연관광  자연경관(하천/해양)        165529   \n18      경기도   용인시 기흥구        한국민속촌       역사관광        역사유적지        163291   \n19      경기도  고양시 일산동구       일산호수공원       문화관광         도시공원        163209   \n20    부산광역시      해운대구      해운대해수욕장       자연관광  자연경관(하천/해양)        162178   \n21    인천광역시       연수구      송도센트럴파크       문화관광         도시공원        161025   \n22  제주특별자치도       제주시       동문재래시장         쇼핑           시장        159847   \n23      경기도       과천시        서울대공원       문화관광         테마공원        159486   \n24  강원특별자치도       정선군      강원랜드카지노       문화관광      기타문화관광지        158750   \n25    인천광역시        중구         연안부두       자연관광  자연경관(하천/해양)        156143   \n26      경기도       파주시      헤이리예술마을       기타관광         기타관광        154418   \n27    부산광역시       수영구      광안리해수욕장       자연관광  자연경관(하천/해양)        152219   \n28  제주특별자치도      서귀포시    서귀포매일올레시장         쇼핑           시장        151192   \n29    서울특별시       광진구       어린이대공원       문화관광         테마공원        149671   \n30    인천광역시       남동구    소래포구종합어시장         쇼핑           시장        147823   \n31  강원특별자치도       강릉시         주문진항       자연관광  자연경관(하천/해양)        147683   \n32  강원특별자치도       양양군          낙산사       역사관광         종교성지        147174   \n33      경기도       파주시     마장호수출렁다리       기타관광         기타관광        142273   \n34      경기도       광명시         광명동굴       자연관광         자연생태        137326   \n35    서울특별시       서초구    예술의전당콘서트홀       문화관광         공연시설        136970   \n36    부산광역시       기장군        해동용궁사       역사관광         종교성지        135424   \n37  강원특별자치도       원주시    원주소금산출렁다리       기타관광         기타관광        131047   \n38    부산광역시      해운대구       송정해수욕장       자연관광  자연경관(하천/해양)        129772   \n39  강원특별자치도       강릉시         안목해변       자연관광  자연경관(하천/해양)        128148   \n\n    year    combined_city  \n0   2018        서울특별시 강남구  \n1   2018      경기도 용인시 처인구  \n2   2018        서울특별시 동작구  \n3   2018        서울특별시 송파구  \n4   2018        서울특별시 용산구  \n5   2018         인천광역시 중구  \n6   2018     경기도 고양시 일산서구  \n7   2018        서울특별시 송파구  \n8   2018  전북특별자치도 전주시 완산구  \n9   2018         인천광역시 중구  \n10  2018      강원특별자치도 속초시  \n11  2018      강원특별자치도 강릉시  \n12  2018         충청남도 보령시  \n13  2018        인천광역시 남동구  \n14  2018       서울특별시 영등포구  \n15  2018     경기도 고양시 일산서구  \n16  2018          경기도 구리시  \n17  2018      강원특별자치도 속초시  \n18  2018      경기도 용인시 기흥구  \n19  2018     경기도 고양시 일산동구  \n20  2018       부산광역시 해운대구  \n21  2018        인천광역시 연수구  \n22  2018      제주특별자치도 제주시  \n23  2018          경기도 과천시  \n24  2018      강원특별자치도 정선군  \n25  2018         인천광역시 중구  \n26  2018          경기도 파주시  \n27  2018        부산광역시 수영구  \n28  2018     제주특별자치도 서귀포시  \n29  2018        서울특별시 광진구  \n30  2018        인천광역시 남동구  \n31  2018      강원특별자치도 강릉시  \n32  2018      강원특별자치도 양양군  \n33  2018          경기도 파주시  \n34  2018          경기도 광명시  \n35  2018        서울특별시 서초구  \n36  2018        부산광역시 기장군  \n37  2018      강원특별자치도 원주시  \n38  2018       부산광역시 해운대구  \n39  2018      강원특별자치도 강릉시  \n['전시시설' '테마공원' '시장' '공연시설' '자연경관(하천/해양)' '역사유적지' '도시공원' '기타문화관광지' '기타관광'\n '종교성지' '자연생태' '레저스포츠시설' '랜드마크관광' '자연경관(산)' '복합관광시설' '자연공원' '육상레저스포츠'\n '기타레저스포츠' '웰니스관광' '농/산/어촌체험' '자연관광(산)' '데이트코스' '수상레저스포츠']"
=======
    "objectID": "한결.html#raw-data-통계청---월별-국내여행-횟수",
    "href": "한결.html#raw-data-통계청---월별-국내여행-횟수",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "",
    "text": "통계청 - 월별 국내 여행 횟수 다운로드 링크\n국내 여행의 의미\n\n공간의 범위\n행정구역상 현 거주지를 벗어나 다른 지역(시/군)을 다녀온 모든 여행을 의미\n활동의 범위\n\n관광 여행\n관광, 맛집 투어, 박물관, 전시 구경, 스포츠, 레저 체험 등의 모든 활동\n기타 여행\n명절 귀성, 가족 행사, 출장, 업무 세미나 등 모든 활동\n\n\n데이터의 기본 단위 : 천회"
  },
  {
    "objectID": "한결.html#data-preprocessing-데이터-전처리",
    "href": "한결.html#data-preprocessing-데이터-전처리",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
    "section": "Data Preprocessing : 데이터 전처리",
    "text": "Data Preprocessing : 데이터 전처리\n\npandas와 numpy 라이브러리 호출\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\n\n\n\npd.read_excel()을 사용해 데이터 불러온 후 num_trip이라는 DataFrame생성\n\nData 저장 경로 규칙\n\n원본 데이터 : data 폴더의 R_월별_국내여행_횟수_20240714204514.xlsx\n전처리 이후 데이터 : pre_data 폴더의 p_num_trip.xlsx\n\n\n\n# header를 두번째 행으로 고정, 첫번째 행에는 불필요한 정보가 들어있기 때문\nnum_trip = pd.read_excel('data/R_월별_국내여행_횟수_20240714204514.xlsx', header=1)\n\n\n\n\nrename()을 사용하여 열(columns)의 변수명 변경\n\n# 시점\nnum_trip = num_trip.rename(columns = { '시점' : 'year', '항목' : 'month'})\n\n# 전체\nnum_trip = num_trip.rename(columns = { '소계' : 'total'})\n\n# 성별\nnum_trip = num_trip.rename(columns = { '남자' : 'male', '여자' :'female'})\n\n\n# 학력\nnum_trip = num_trip.rename(columns = { '초졸 이하' : 'elmt', '중학교' : 'mid',\n                                       '고등학교' : 'high', '대학교이상' : 'univ+'})\n\n# 가구원수\nnum_trip = num_trip.rename(columns = { '1인' : 'per1',\n                                       '2인' : 'per2',\n                                       '3인이상' : 'per3+'})\n\n\n\n\n열(columns)의 파생변수 생성\n\n연령 - 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상을 청소년, 청년, 중년, 노년 층으로 구분\n\nnum_trip[\"teens\"] = num_trip[\"15~19세\"]\nnum_trip[\"young_adults\"] = num_trip[\"20대\"] + num_trip[\"30대\"]\nnum_trip[\"middle_adults\"] = num_trip[\"40대\"] + num_trip[\"50대\"]\nnum_trip[\"seniors\"] = num_trip[\"60대\"] + num_trip[\"70세 이상\"]\n\n\n\ndrop()을 사용하여 기존의 연령 열 삭제\n\nnp.arrange를 사용하여 columns의 index 지정(5,12,1) 총 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\n\n# 15~19세, 20대, 30대, 40대, 50대, 60대, 70세 이상 열 7개 삭제\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,12,1)], axis=1)\n\n\n\n\n가구 소득\n\n저소득 ~ 200 만원 / 중위소득 200~500 만원 / 고소득 500~600이상 / 무응답\n\nnum_trip[\"l_sal\"] = num_trip[\"100만원 미만\"]     + num_trip[\"100~200만원 미만\"]\nnum_trip[\"m_sal\"] = num_trip[\"200~300만원 미만\"] + num_trip[\"300~400만원 미만\"] + num_trip[\"400~500만원 미만\"]\nnum_trip[\"h_sal\"] = num_trip[\"500~600만원 미만\"] + num_trip[\"600만원 이상\"]\nnum_trip[\"nr\"]    = num_trip[\"무응답\"]\n\n\n\n\ndrop()을 사용하여 기존의 가구 소득 열 삭제\n\nnp.arrange를 사용하여 columns의 index 지정(24,32,1) 총 100만원 미만, 100~200만원 미만, 200~300만원 미만, 300~400만원 미만, 400~500만원 미만, 500~600만원 미만, 600만원 이상, 무응답 총 8열 삭제\n\nnum_trip = num_trip.drop(num_trip.columns[np.arange(24,32,1)], axis=1)\n\n\n\n\n\n\n열(columns) 삭제\n\n직업 - 직업과 여행 횟수간의 상관관계가 크게 없다고 판단하여 임금봉급근로자, 고용원있는사업주, 고용원없는자영업자, 무급가족 종사자, 사무전문, 기술생산노무, 판매서비스, 자영업, 학생, 전업주부, 무직은퇴, 기타 총 12개의 열 삭제\n\n\ndrop()과 np.arrange를 사용하여 columns의 index 지정(5,17,1)\n\nnum_trip = num_trip.drop(num_trip.columns[np.arange(5,17,1)], axis=1)\n\n\n\n\n\n데이터 전처리 시 예상 결과\n\n데이터 전처리 시\n\n원본 : 39개 열, 파생변수 : 4 + 4 = 8 개열 생성, 열 삭제 : 27개 열 삭제 → 총 39 + 4 + 4 - 27 = 20 개의 columns이 생성됩니다.\n\n\n\n\n\n데이터의 정보 확인하기 - info(), shape, head(), tail(), describe() 이용\n\nnum_trip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           5 non-null      float64\n 1   month          60 non-null     object \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             60 non-null     object \ndtypes: float64(1), int64(17), object(2)\nmemory usage: 9.5+ KB\n\n\n\nnum_trip.shape\n\n(60, 20)\n\n\n\nnum_trip.describe()\n\n\n\n\n\n\n\n\nyear\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\n\n\n\n\ncount\n5.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n\n\nmean\n2020.000000\n23499.133333\n11873.550000\n11625.616667\n516.816667\n1096.483333\n8369.816667\n13515.933333\n3003.816667\n5115.950000\n15379.366667\n899.066667\n8643.333333\n9709.166667\n4247.566667\n1670.983333\n12459.050000\n9339.883333\n\n\nstd\n1.581139\n4580.214955\n2304.115503\n2321.201268\n258.558880\n443.281771\n2136.929038\n2081.333747\n479.954712\n1097.604594\n3094.381672\n362.865379\n1353.916800\n1950.671785\n1152.287134\n697.929905\n2816.137374\n1928.204672\n\n\nmin\n2018.000000\n12698.000000\n6586.000000\n6111.000000\n197.000000\n403.000000\n4337.000000\n7735.000000\n2047.000000\n2496.000000\n8154.000000\n365.000000\n5218.000000\n5009.000000\n2033.000000\n713.000000\n7488.000000\n4497.000000\n\n\n25%\n2019.000000\n20137.000000\n10179.750000\n9866.000000\n314.250000\n745.000000\n6736.500000\n12439.250000\n2644.500000\n4350.750000\n13187.000000\n604.750000\n7918.000000\n8310.750000\n3385.500000\n1148.750000\n10510.250000\n8538.000000\n\n\n50%\n2020.000000\n24109.000000\n11758.000000\n11932.500000\n451.000000\n893.000000\n8208.500000\n13431.000000\n3029.500000\n5176.000000\n15599.000000\n774.000000\n8593.500000\n9793.000000\n4429.000000\n1391.500000\n11389.500000\n9446.000000\n\n\n75%\n2021.000000\n25572.500000\n13024.500000\n13012.250000\n680.250000\n1479.750000\n9789.000000\n14651.000000\n3280.750000\n5782.750000\n17039.750000\n1202.750000\n9204.500000\n10878.500000\n5106.250000\n2186.000000\n14458.750000\n10806.250000\n\n\nmax\n2022.000000\n34251.000000\n16950.000000\n17300.000000\n1217.000000\n2048.000000\n12805.000000\n18555.000000\n4185.000000\n7714.000000\n22652.000000\n1763.000000\n12493.000000\n14642.000000\n6840.000000\n3931.000000\n19596.000000\n12853.000000\n\n\n\n\n\n\n\n\nnum_trip.head(12)\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018.0\n1월\n24233\n13019\n11214\n322\n1326\n8980\n13604\n2902\n4946\n16384\n1267\n8113\n10362\n4491\n1925\n12005\n10148\n156\n\n\n1\nNaN\n2월\n28263\n14868\n13396\n567\n1476\n11288\n14931\n3286\n6075\n18902\n1370\n9087\n12154\n5651\n1798\n15334\n10982\n149\n\n\n2\nNaN\n3월\n24668\n12768\n11900\n565\n1806\n8723\n13575\n3368\n5504\n15796\n1110\n8645\n9875\n5039\n1912\n13060\n9545\n149\n\n\n3\nNaN\n4월\n24242\n12099\n12143\n482\n1668\n8810\n13281\n3058\n5590\n15594\n1111\n8607\n9052\n5473\n2173\n12848\n9082\n139\n\n\n4\nNaN\n5월\n24571\n12607\n11965\n912\n1596\n9064\n13000\n3142\n5096\n16334\n1232\n7960\n9774\n5606\n2086\n12881\n9348\n255\n\n\n5\nNaN\n6월\n24600\n12600\n12000\n510\n1569\n9387\n13134\n3211\n5735\n15654\n1277\n8580\n9869\n4874\n1662\n13180\n9559\n200\n\n\n6\nNaN\n7월\n24628\n12887\n11741\n687\n1697\n9556\n12689\n2763\n5280\n16585\n1298\n8239\n10175\n4916\n1766\n13269\n9420\n173\n\n\n7\nNaN\n8월\n25298\n12791\n12507\n525\n1388\n10556\n12828\n2882\n5248\n17168\n1037\n8762\n10763\n4734\n1706\n14330\n9209\n52\n\n\n8\nNaN\n9월\n29371\n14755\n14616\n590\n1719\n12805\n14257\n3229\n6314\n19828\n1595\n9923\n12423\n5430\n2225\n15405\n11637\n105\n\n\n9\nNaN\n10월\n26051\n13041\n13010\n688\n1530\n10339\n13494\n3188\n5691\n17172\n1065\n8270\n11554\n5164\n1766\n14845\n9309\n130\n\n\n10\nNaN\n11월\n25413\n12673\n12740\n449\n1742\n10044\n13178\n3225\n5190\n16997\n1176\n9078\n10593\n4566\n1856\n13729\n9673\n153\n\n\n11\nNaN\n12월\n29814\n15853\n13962\n667\n1443\n11819\n15886\n3839\n6065\n19910\n1579\n10353\n12605\n5279\n2230\n16735\n10765\n84\n\n\n\n\n\n\n\n\nnum_trip.tail(12)\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n48\n2022.0\n1월\n22774\n11168\n11606\n393\n753\n7043\n14585\n3011\n4683\n15081\n882\n8610\n9502\n3780\n1359\n10376\n11040\n-\n\n\n49\nNaN\n2월\n21843\n11217\n10626\n272\n578\n7764\n13228\n2803\n4658\n14382\n799\n7682\n9812\n3549\n1155\n10149\n10538\n-\n\n\n50\nNaN\n3월\n20611\n10149\n10462\n285\n784\n6377\n13165\n2832\n4518\n13261\n485\n7941\n8790\n3394\n935\n9946\n9731\n-\n\n\n51\nNaN\n4월\n23745\n11500\n12246\n372\n1147\n7807\n14420\n3128\n5131\n15487\n640\n9313\n9177\n4616\n1340\n10961\n11444\n-\n\n\n52\nNaN\n5월\n25168\n12472\n12697\n500\n955\n8192\n15522\n3323\n5926\n15919\n752\n9199\n10256\n4962\n1394\n12327\n11447\n-\n\n\n53\nNaN\n6월\n22989\n11107\n11882\n453\n895\n7689\n13952\n3048\n5162\n14778\n605\n8339\n9604\n4440\n1389\n10666\n10933\n-\n\n\n54\nNaN\n7월\n23985\n11531\n12454\n546\n750\n8250\n14439\n2886\n5358\n15742\n753\n8917\n9881\n4434\n1200\n11022\n11763\n-\n\n\n55\nNaN\n8월\n25248\n12229\n13019\n374\n930\n8311\n15633\n3194\n5249\n16805\n1090\n9237\n10507\n4414\n1449\n11027\n12772\n-\n\n\n56\nNaN\n9월\n26525\n13373\n13152\n508\n1060\n9127\n15830\n3519\n6387\n16619\n949\n9102\n10877\n5598\n1352\n12321\n12853\n-\n\n\n57\nNaN\n10월\n24411\n11936\n12475\n458\n806\n8272\n14875\n3431\n5424\n15556\n668\n8737\n10059\n4948\n1395\n10807\n12210\n-\n\n\n58\nNaN\n11월\n23434\n11405\n12029\n531\n769\n7766\n14368\n3189\n5456\n14788\n610\n8186\n9737\n4900\n1552\n9722\n12159\n-\n\n\n59\nNaN\n12월\n22988\n11500\n11488\n538\n867\n7477\n14106\n3488\n5517\n13982\n878\n8479\n9228\n4403\n1290\n10768\n10930\n-\n\n\n\n\n\n\n\n\n\n\n데이터 문제점 해결\n\n1. year의 NaN값을 채워야함\n\n# year의 null값 index 범위를 지정하고 2018, 2019, 2020, 2021, 2022 값 할당\nnum_trip['year'][1 :12] = 2018\nnum_trip['year'][13:24] = 2019\nnum_trip['year'][25:36] = 2020\nnum_trip['year'][37:48] = 2021\nnum_trip['year'][49:60] = 2022\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:2: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:3: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:4: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:5: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:6: FutureWarning:\n\nChainedAssignmentError: behaviour will change in pandas 3.0!\nYou are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\nA typical example is when you are setting values in a column of a DataFrame, like:\n\ndf[\"col\"][row_indexer] = value\n\nUse `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_8800\\870468280.py:6: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n2. month의 type을 object에서 int로 형 변환 필요\n\n# str.replace()를 사용해서 맨 마지막 글자인 '월'을 ''로 변경\n# astype('int')를 사용하여 int값으로 형 변환\nnum_trip['month'] = num_trip['month'].str.replace('월','')\nnum_trip['month'] = num_trip['month'].astype('int')\n\n\n\n3. nr(월급 미 응답자) columns의 NaN값이 ’-’로 대응되어 있음\n\n# loc을 사용하여 nr 컬럼의 값이 \"-\"인 nr열의 값에 np.nan을 할당\nnum_trip.loc[num_trip[\"nr\"] == \"-\", [\"nr\"]] = np.nan\n\n\n\n\n\n데이터 저장\n\n# to_excel()을 사용하여 DataFrame을 xlsx파일 형태로 저장\n# index=False : Unnamed: 0 이라는 임의의 인덱스가 생성되는 것을 방지\nnum_trip.to_excel(excel_writer = 'pre_data/p_num_trip.xlsx', index=False)"
  },
  {
    "objectID": "한결.html#data-visualization-데이터-시각화",
    "href": "한결.html#data-visualization-데이터-시각화",
    "title": "2018-2022 5개년 연별 국내 여행 횟수 트랜드",
<<<<<<< HEAD
    "section": "Data Visualization : 데이터 시각화",
    "text": "Data Visualization : 데이터 시각화\n\npandas와 numpy 라이브러리 호출\n\n# 라이브러리 호출\nimport pandas as pd\nimport numpy as np\n\n\n\npd.read_excel()을 사용해 전처리 된 데이터 불러오기\n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('pre_data/p_num_trip.xlsx')\n\n\n\np_num_trip.xlsx 데이터의 정보 확인하기 - info(), shape, head(), tail(), describe() 이용\n\np_num_trip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           60 non-null     int64  \n 1   month          60 non-null     int64  \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             12 non-null     float64\ndtypes: float64(1), int64(19)\nmemory usage: 9.5 KB\n\n\n\np_num_trip.shape\n\n(60, 20)\n\n\n\np_num_trip.head()\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n0\n2018\n1\n24233\n13019\n11214\n322\n1326\n8980\n13604\n2902\n4946\n16384\n1267\n8113\n10362\n4491\n1925\n12005\n10148\n156.0\n\n\n1\n2018\n2\n28263\n14868\n13396\n567\n1476\n11288\n14931\n3286\n6075\n18902\n1370\n9087\n12154\n5651\n1798\n15334\n10982\n149.0\n\n\n2\n2018\n3\n24668\n12768\n11900\n565\n1806\n8723\n13575\n3368\n5504\n15796\n1110\n8645\n9875\n5039\n1912\n13060\n9545\n149.0\n\n\n3\n2018\n4\n24242\n12099\n12143\n482\n1668\n8810\n13281\n3058\n5590\n15594\n1111\n8607\n9052\n5473\n2173\n12848\n9082\n139.0\n\n\n4\n2018\n5\n24571\n12607\n11965\n912\n1596\n9064\n13000\n3142\n5096\n16334\n1232\n7960\n9774\n5606\n2086\n12881\n9348\n255.0\n\n\n\n\n\n\n\n\np_num_trip.tail()\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\n55\n2022\n8\n25248\n12229\n13019\n374\n930\n8311\n15633\n3194\n5249\n16805\n1090\n9237\n10507\n4414\n1449\n11027\n12772\nNaN\n\n\n56\n2022\n9\n26525\n13373\n13152\n508\n1060\n9127\n15830\n3519\n6387\n16619\n949\n9102\n10877\n5598\n1352\n12321\n12853\nNaN\n\n\n57\n2022\n10\n24411\n11936\n12475\n458\n806\n8272\n14875\n3431\n5424\n15556\n668\n8737\n10059\n4948\n1395\n10807\n12210\nNaN\n\n\n58\n2022\n11\n23434\n11405\n12029\n531\n769\n7766\n14368\n3189\n5456\n14788\n610\n8186\n9737\n4900\n1552\n9722\n12159\nNaN\n\n\n59\n2022\n12\n22988\n11500\n11488\n538\n867\n7477\n14106\n3488\n5517\n13982\n878\n8479\n9228\n4403\n1290\n10768\n10930\nNaN\n\n\n\n\n\n\n\n\np_num_trip.describe()\n\n\n\n\n\n\n\n\nyear\nmonth\ntotal\nmale\nfemale\nelmt\nmid\nhigh\nuniv+\nper1\nper2\nper3+\nteens\nyoung_adults\nmiddle_adults\nseniors\nl_sal\nm_sal\nh_sal\nnr\n\n\n\n\ncount\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n60.000000\n12.000000\n\n\nmean\n2020.000000\n6.500000\n23499.133333\n11873.550000\n11625.616667\n516.816667\n1096.483333\n8369.816667\n13515.933333\n3003.816667\n5115.950000\n15379.366667\n899.066667\n8643.333333\n9709.166667\n4247.566667\n1670.983333\n12459.050000\n9339.883333\n145.416667\n\n\nstd\n1.426148\n3.481184\n4580.214955\n2304.115503\n2321.201268\n258.558880\n443.281771\n2136.929038\n2081.333747\n479.954712\n1097.604594\n3094.381672\n362.865379\n1353.916800\n1950.671785\n1152.287134\n697.929905\n2816.137374\n1928.204672\n52.531304\n\n\nmin\n2018.000000\n1.000000\n12698.000000\n6586.000000\n6111.000000\n197.000000\n403.000000\n4337.000000\n7735.000000\n2047.000000\n2496.000000\n8154.000000\n365.000000\n5218.000000\n5009.000000\n2033.000000\n713.000000\n7488.000000\n4497.000000\n52.000000\n\n\n25%\n2019.000000\n3.750000\n20137.000000\n10179.750000\n9866.000000\n314.250000\n745.000000\n6736.500000\n12439.250000\n2644.500000\n4350.750000\n13187.000000\n604.750000\n7918.000000\n8310.750000\n3385.500000\n1148.750000\n10510.250000\n8538.000000\n123.750000\n\n\n50%\n2020.000000\n6.500000\n24109.000000\n11758.000000\n11932.500000\n451.000000\n893.000000\n8208.500000\n13431.000000\n3029.500000\n5176.000000\n15599.000000\n774.000000\n8593.500000\n9793.000000\n4429.000000\n1391.500000\n11389.500000\n9446.000000\n149.000000\n\n\n75%\n2021.000000\n9.250000\n25572.500000\n13024.500000\n13012.250000\n680.250000\n1479.750000\n9789.000000\n14651.000000\n3280.750000\n5782.750000\n17039.750000\n1202.750000\n9204.500000\n10878.500000\n5106.250000\n2186.000000\n14458.750000\n10806.250000\n160.250000\n\n\nmax\n2022.000000\n12.000000\n34251.000000\n16950.000000\n17300.000000\n1217.000000\n2048.000000\n12805.000000\n18555.000000\n4185.000000\n7714.000000\n22652.000000\n1763.000000\n12493.000000\n14642.000000\n6840.000000\n3931.000000\n19596.000000\n12853.000000\n255.000000\n\n\n\n\n\n\n\n\n\n분석을 용이하게 하기 위해 query()를 사용하여 각 년도별 행을 추출하여 DataFrame생성\n\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n\n\n\n그래프를 그리기 위해 matplotlib.pyplot 라이브러리 호출\n\nimport matplotlib.pyplot as plt\n\n\n\n그래프에 한글과 언더바(_) 표시가 가능하게 하기 위해 rcParams(runtime configuration) 딕셔너리 설정\n\nplt.rcParams['font.family'] ='Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] =False\n\n\n\n1. 2018년도 부터 2020년도 까지 5년간 연령별 여행 횟수 증감의 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 연령대 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.6)의 중간(0.3)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.3, years)\n\n# legend()를 사용하여 범례 추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n2. 2018년도 부터 2020년도 까지 5년간 가구원 수 별 여행 횟수 증감의 트랜드 구하기\n\n# 그래프의 x축과 y축의 데이터 값 만들기\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행, 년간 가구원 수 별 여행 횟수의 합을 구하는 것을 2018년부터 2022년까지 반복한다.\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# title(), ylabel(), xlabel()을 사용하여 그래프의 제목과 x, y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 그리기\n# x_range : year의 길이 만큼 x축의 범위를 설정\n# x_range + c : 그래프가 그려지는 위치값을 조절\n# width : 그래프의 너비 설정\n# label : 범례 표시\n# color : 그래프의 색상 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 눈금 설정\n# x_ticks()을 사용하여 x_range(0~0.4)의 중간(0.2)으로 눈금의 위치를 옮기고, 각 해당 위치에 해당하는 레이블을 years로 지정하여 년도가 함께 표시되도록 지정\nplt.xticks(x_range+0.2, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
=======
    "section": "",
    "text": "# 사용 라이브러리 호출\nimport pandas as pd\nimport numpy as np \n\n# 전처리 된 데이터 불러오기\np_num_trip = pd.read_excel('pre_data/p_num_trip.xlsx')\n\n# 데이터 정보 확인하기\n# p_num_trip(년-월 별 여행 횟수)데이터 정보 확인하기\np_num_trip.info()\np_num_trip.shape\np_num_trip.head()\np_num_trip.describe()\n\n# 분석을 용이하게 하기 위해 년도별 DataFrame생성\ny2018 = p_num_trip.query('year == 2018')\ny2019 = p_num_trip.query('year == 2019')\ny2020 = p_num_trip.query('year == 2020')\ny2021 = p_num_trip.query('year == 2021')\ny2022 = p_num_trip.query('year == 2022')\n\n# 데이터 시각화\n# 시각화 라이브러리 호출\nimport matplotlib.pyplot as plt\n\n# 그래프에 한글 표시하기\nplt.rcParams['font.family'] ='Malgun Gothic'\n# 언더바(_) 표시 가능하게 만듬\nplt.rcParams['axes.unicode_minus'] =False\n\n# 데이터 시각화\n\n# 3. 2018년도 부터 2020년도 까지 연령별 여행 횟수 증감의 트랜드 구하기\n# 데이터 선택\n\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행\nteens_total = [x['teens'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyoung_adults_total = [x['young_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nmiddle_adults_total = [x['middle_adults'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nseniors_adults_total = [x['seniors'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# 그래프 제목과 y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 연령대 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, teens_total, width=0.2, label='청소년(15~19세)', color = 'lawngreen')\nplt.bar(x_range+0.2, young_adults_total, width=0.2, label='청년(2~30대)', color = 'blue')\nplt.bar(x_range+0.4, middle_adults_total, width=0.2, label='중년(4~50대)', color = 'red')\nplt.bar(x_range+0.6, seniors_adults_total, width=0.2, label='노년(6~70대 이상)', color = 'gray')\n\n# x축 라벨 설정\nplt.xticks(x_range+0.3, years)\n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n# 4. 가구원수 별 2018 ~ 2022년 연간 여행 횟수 비교\n# for x in range 구문을 이용하여 다음과 같은 반복문을 실행\nper1_total = [x['per1'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper2_total = [x['per2'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nper3_total = [x['per3+'].sum() for x in [y2018, y2019, y2020, y2021, y2022]]\nyears = [2018,2019,2020,2021,2022]\n\n# 그래프 제목과 y축 레이블 설정\nplt.title(\"2018년 ~ 2022년 가구원 수 별 여행 횟수\")\nplt.ylabel(\"단위 : 천회\")\nplt.xlabel(\"단위 : 년\")\n\n# 그래프 표시\nx_range = np.arange(len(years))\nplt.bar(x_range+0.0, per1_total, width=0.2, label='1인 가구', color = 'slateblue')\nplt.bar(x_range+0.2, per2_total, width=0.2, label='2인 가구', color = 'coral')\nplt.bar(x_range+0.4, per3_total, width=0.2, label='3인 이상 가구', color = 'teal')\n\n# x축 라벨 설정\nplt.xticks(x_range+0.25, years) \n\n# 범례추가\nplt.legend()\n\n# 그래프 보여주기\nplt.show()\nplt.clf()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 20 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   year           60 non-null     int64  \n 1   month          60 non-null     int64  \n 2   total          60 non-null     int64  \n 3   male           60 non-null     int64  \n 4   female         60 non-null     int64  \n 5   elmt           60 non-null     int64  \n 6   mid            60 non-null     int64  \n 7   high           60 non-null     int64  \n 8   univ+          60 non-null     int64  \n 9   per1           60 non-null     int64  \n 10  per2           60 non-null     int64  \n 11  per3+          60 non-null     int64  \n 12  teens          60 non-null     int64  \n 13  young_adults   60 non-null     int64  \n 14  middle_adults  60 non-null     int64  \n 15  seniors        60 non-null     int64  \n 16  l_sal          60 non-null     int64  \n 17  m_sal          60 non-null     int64  \n 18  h_sal          60 non-null     int64  \n 19  nr             12 non-null     float64\ndtypes: float64(1), int64(19)\nmemory usage: 9.5 KB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
>>>>>>> 89e2936607d010c37f0cc73cbafe6fed5415e65e
>>>>>>> 43a8746f888ce36563d15cd8e34f41d13ac455fd
  }
]